#!/usr/bin/env bash

set -euo pipefail

BIN_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source ${BIN_DI}/../lib/utils.sh

install_haxe() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local os="$(os_github_name)"
  local arch="$(arch_github_name)"

  if [ "$install_type" != "version" ]; then
    fail "asdf-haxe supports release installs only"
  fi

  case version_endpoints_compare "$version" "<=4.3.1" "=4.3.4" ">=4.3.5" ">=4.4" in 
    "<=4.3.1")
      exec ${BIN_DIR}/install-old "$version" "$os" "$arch" "$install_path"
    "other")
      if [[ "$arch" = "arm64" ]] && [[ "os" = "linux" ]]; then
        case "$version" in
        "4.3.2") then
          echo "TECHNICALLY: this is 4.3.2 + OCaml5 support (87ada5e)" >&2
          install_from_build_haxe_org "linux-arm64" "4.3.2" "87ada5e2afa288c136fc1963c5d2c126dcd7241d"
          ;;
        "4.3.3")
          install_from_build_haxe_org "linux-arm64" "4.3.3"
        fi
      else
        standard_x86_install "$version" "$os" "arch" "$install_path";; 
      fi
      ;;
    "=4.3.4")



      case "$arch" in
        "64")
          
            install_from_github "$version" "${os}${arch}" "$install_path"
          else
            if [[ "$version" = "3.4.3" ]] || [[ "$version" = "4.0.0-preview.1" ]]; then 
              warn_early_64_bit
              install_from_github "$version" "${os}" "$install_path"
          fi
          ;;
        "32")
          if [[ "$os" = "linux "]]; then
            install_from_github "$version" "${os}${arch}" "$install_path"
          else
          ;;
        *)
          fail 
          esac
    ">=3.4.4")
      # win64 is also now on the scene; osx is exclusively 64 bit now

  case "$arch" in
    "64")
      if [[ "$os" = "osx" ]]; then
        install_from_github "$version" "${os}.tar.gz" "$install_path"
      elif [[ "$os" = "win" ]]
        install_from_github "$version" "${os}${arch}.zip" "$install_path"
    "32")
      case "$os" in
        win)
          install_from_github "$version" "$os" "$install_path"
        linux)
  esac

 
    "other")
        if [[ "$()" == ]]
    3)
        install_haxe_4_3_4;;
    4)
        install_haxe_4_3_5_or_more;;
    5)
        install_hexe_4_4_or_newer;;
  esac

install_old_haxe() {
  version=$1
  os=$2
  arch=$3
  install_path=$4

  case version_endpoints_compare "$version" "<=3.0.0" ">=3.1.2" ">=3.4.3" in 
    "<=3.0.0")
      case "$arch" in
        "64")
          echo "WARNING: back before 3.0 everything was 32 bit." >&2
          echo "         Your 64 bit operating system may or may not be able to deal." >&2
          ;;
        "32") : ;;
        *) fail_arch_unknown ;; 
      esac
    
      install_from_github "v{$version}" "${os}" "$install_path" "v"
      ;;
    "other")
      case "$os" in 
        "linux")
          case "$arch" in
            "64"|"32") : ;; 
            "raspi") 
              if [[ "$version" != "3.1.1" ]]; then fail_arch_unknown; fi ;;
            *) fail_arch_unknown ;;
          esac
          install_from_github "v${version}" "${os}${arch}" "$install_path"
        "osx")
          if [[ "$arch" == "32" ]]; then fail_arch_late_32; fi ;;
      esac
          
      install_from_github "v${version}" "${os}" "$install_path"
      ;;
    ">=3.1.2")
      #they stopped prefixing release tags with "v"
      if [[ "$os" = "linux "]]; then
          install_from_github "${version}" "${os}${arch}" "$install_path"
      elif [[ "$os" = "osx" ]] && [[ "$arch" = "32" ]]; then
        fail_arch_late_32
      elif [[ "$arch" = "raspi" ]] && [[ "$version" != "3.1.2" ]] && [[ "$version" != "3.1.3" ]]; then 
          fail_arch_unknown
      fi
        
      install_from_github "$version" "${os}" "$install_path"
      ;;
    ">=3.4.3")
      if [[ "$os" = "win" ]] && [[ "$arch" = "64" ]] && ( [[ "$version" = "3.4.3" ]] || [[ "$version" = "4.0.0-preview1" ]]); then
        echo "WARNING: windows 64 bit binaries did not start shipping til 3.4.4" >&2
      fi

      

      ;;
    esac

}

install_haxe "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"